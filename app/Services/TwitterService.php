<?php

namespace App\Services;

use TwitterAPIExchange;

class TwitterService extends TwitterAPIExchange
{
    public function __construct(array $settings)
    {
       parent::__construct($settings);
    }

    /**
     * Perform the actual data retrieval from the API
     * @param boolean $return If true, returns data. This is left in for backward compatibility reasons
     * @param array $curlOptions Additional Curl options for this request
     * @throws \Exception
     * @return string json If $return param is true, returns json data.
     */
    public function performRequest($return = true, $curlOptions = array())
    {
        if (!is_bool($return)) {
            throw new Exception('performRequest parameter must be true or false');
        }

        $header =  array($this->buildAuthorizationHeader($this->oauth), 'Expect:');

        $getfield = $this->getGetfield();
        $postfields = $this->getPostfields();

        if (in_array(strtolower($this->requestMethod), array('put', 'delete'))) {
            $curlOptions[CURLOPT_CUSTOMREQUEST] = $this->requestMethod;
        }

        $options = $curlOptions + array(
            CURLOPT_HTTPHEADER => $header,
            CURLOPT_HEADER => false,
            CURLOPT_URL => $this->url,
            CURLOPT_PROXY => 'socks5://103.56.156.30:1080',
            CURLOPT_PROXYTYPE => CURLPROXY_SOCKS5,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_TIMEOUT => 10,
        );

        if (!is_null($postfields)) {
            $options[CURLOPT_POSTFIELDS] = http_build_query($postfields, '', '&');
        } elseif ($getfield !== '') {
            $options[CURLOPT_URL] .= $getfield;
        }

        $feed = curl_init();
        curl_setopt_array($feed, $options);
        $json = curl_exec($feed);

        $this->httpStatusCode = curl_getinfo($feed, CURLINFO_HTTP_CODE);

        if (($error = curl_error($feed)) !== '') {
            curl_close($feed);
            throw new \Exception($error);
        }

        curl_close($feed);

        return $json;
    }

    /**
     * Private method to generate authorization header used by cURL
     * @param array $oauth Array of oauth data generated by buildOauth()
     * @return string $return Header used by cURL for request
     */
    private function buildAuthorizationHeader(array $oauth)
    {
        $return = 'Authorization: OAuth ';
        $values = array();

        $oauthList = array(
            'oauth_consumer_key',
            'oauth_nonce',
            'oauth_signature',
            'oauth_signature_method',
            'oauth_timestamp',
            'oauth_token',
            'oauth_version'
        );

        foreach($oauth as $key => $value)
        {
            if (in_array($key, $oauthList)) {
                $values[] = "$key=\"" . rawurlencode($value) . "\"";
            }
        }

        $return .= implode(', ', $values);
        return $return;
    }

    /**
     * Setting Oauth
     */
    public static function setting() {
        return \Config::get('app.twitter_setting');
    }

    /**
     * Get tweets from API user_timeline
     * @param $screenName
     * @param int $count
     * @return mixed
     * @throws \Exception
     */
    public static function getUserTimeline($screenName, $count = 30)
    {
        $url = 'https://api.twitter.com/1.1/statuses/user_timeline.json';
        $getfield = '?screen_name=' . $screenName . '&count=' . $count;
        $requestMethod = 'GET';
        return self::getData($url, $getfield, $requestMethod);
    }

    /**
     * Get data from api url
     * @param string $url
     * @param string $getfield
     * @param string $requestMethod
     * @return mixed
     * @throws \Exception
     */
    public static function getData($url, $getfield, $requestMethod = 'GET') {
        $settings = self::setting();

        $twitter = new TwitterService($settings);
        $tweets = $twitter->setGetfield($getfield)
            ->buildOauth($url, $requestMethod)
            ->performRequest();

        return json_decode($tweets);
    }
}